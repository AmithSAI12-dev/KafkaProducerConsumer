/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.project.kafka.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Product extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6482971932982748995L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Product\",\"namespace\":\"com.project.kafka.avro\",\"fields\":[{\"name\":\"product_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product Id\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product Name\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product Description\"},{\"name\":\"price\",\"type\":\"float\",\"doc\":\"Product Price\"},{\"name\":\"discount\",\"type\":\"float\",\"doc\":\"Product Discount Percentage\",\"default\":0.0},{\"name\":\"date\",\"type\":\"long\",\"doc\":\"Product date\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Product> ENCODER =
      new BinaryMessageEncoder<Product>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Product> DECODER =
      new BinaryMessageDecoder<Product>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Product> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Product> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Product> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Product>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Product to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Product from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Product instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Product fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Product Id */
  @Deprecated public java.lang.String product_id;
  /** Product Name */
  @Deprecated public java.lang.String name;
  /** Product Description */
  @Deprecated public java.lang.String description;
  /** Product Price */
  @Deprecated public float price;
  /** Product Discount Percentage */
  @Deprecated public float discount;
  /** Product date */
  @Deprecated public long date;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Product() {}

  /**
   * All-args constructor.
   * @param product_id Product Id
   * @param name Product Name
   * @param description Product Description
   * @param price Product Price
   * @param discount Product Discount Percentage
   * @param date Product date
   */
  public Product(java.lang.String product_id, java.lang.String name, java.lang.String description, java.lang.Float price, java.lang.Float discount, java.lang.Long date) {
    this.product_id = product_id;
    this.name = name;
    this.description = description;
    this.price = price;
    this.discount = discount;
    this.date = date;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return product_id;
    case 1: return name;
    case 2: return description;
    case 3: return price;
    case 4: return discount;
    case 5: return date;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: product_id = value$ != null ? value$.toString() : null; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: description = value$ != null ? value$.toString() : null; break;
    case 3: price = (java.lang.Float)value$; break;
    case 4: discount = (java.lang.Float)value$; break;
    case 5: date = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'product_id' field.
   * @return Product Id
   */
  public java.lang.String getProductId() {
    return product_id;
  }


  /**
   * Sets the value of the 'product_id' field.
   * Product Id
   * @param value the value to set.
   */
  public void setProductId(java.lang.String value) {
    this.product_id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Product Name
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Product Name
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Product Description
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * Product Description
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return Product Price
   */
  public float getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * Product Price
   * @param value the value to set.
   */
  public void setPrice(float value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'discount' field.
   * @return Product Discount Percentage
   */
  public float getDiscount() {
    return discount;
  }


  /**
   * Sets the value of the 'discount' field.
   * Product Discount Percentage
   * @param value the value to set.
   */
  public void setDiscount(float value) {
    this.discount = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return Product date
   */
  public long getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * Product date
   * @param value the value to set.
   */
  public void setDate(long value) {
    this.date = value;
  }

  /**
   * Creates a new Product RecordBuilder.
   * @return A new Product RecordBuilder
   */
  public static com.project.kafka.avro.Product.Builder newBuilder() {
    return new com.project.kafka.avro.Product.Builder();
  }

  /**
   * Creates a new Product RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Product RecordBuilder
   */
  public static com.project.kafka.avro.Product.Builder newBuilder(com.project.kafka.avro.Product.Builder other) {
    if (other == null) {
      return new com.project.kafka.avro.Product.Builder();
    } else {
      return new com.project.kafka.avro.Product.Builder(other);
    }
  }

  /**
   * Creates a new Product RecordBuilder by copying an existing Product instance.
   * @param other The existing instance to copy.
   * @return A new Product RecordBuilder
   */
  public static com.project.kafka.avro.Product.Builder newBuilder(com.project.kafka.avro.Product other) {
    if (other == null) {
      return new com.project.kafka.avro.Product.Builder();
    } else {
      return new com.project.kafka.avro.Product.Builder(other);
    }
  }

  /**
   * RecordBuilder for Product instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Product>
    implements org.apache.avro.data.RecordBuilder<Product> {

    /** Product Id */
    private java.lang.String product_id;
    /** Product Name */
    private java.lang.String name;
    /** Product Description */
    private java.lang.String description;
    /** Product Price */
    private float price;
    /** Product Discount Percentage */
    private float discount;
    /** Product date */
    private long date;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.project.kafka.avro.Product.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.product_id)) {
        this.product_id = data().deepCopy(fields()[0].schema(), other.product_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.discount)) {
        this.discount = data().deepCopy(fields()[4].schema(), other.discount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.date)) {
        this.date = data().deepCopy(fields()[5].schema(), other.date);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Product instance
     * @param other The existing instance to copy.
     */
    private Builder(com.project.kafka.avro.Product other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.product_id)) {
        this.product_id = data().deepCopy(fields()[0].schema(), other.product_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.discount)) {
        this.discount = data().deepCopy(fields()[4].schema(), other.discount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.date)) {
        this.date = data().deepCopy(fields()[5].schema(), other.date);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'product_id' field.
      * Product Id
      * @return The value.
      */
    public java.lang.String getProductId() {
      return product_id;
    }


    /**
      * Sets the value of the 'product_id' field.
      * Product Id
      * @param value The value of 'product_id'.
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder setProductId(java.lang.String value) {
      validate(fields()[0], value);
      this.product_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'product_id' field has been set.
      * Product Id
      * @return True if the 'product_id' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'product_id' field.
      * Product Id
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder clearProductId() {
      product_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Product Name
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Product Name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Product Name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Product Name
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Product Description
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Product Description
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Product Description
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * Product Description
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * Product Price
      * @return The value.
      */
    public float getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * Product Price
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder setPrice(float value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * Product Price
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * Product Price
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder clearPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'discount' field.
      * Product Discount Percentage
      * @return The value.
      */
    public float getDiscount() {
      return discount;
    }


    /**
      * Sets the value of the 'discount' field.
      * Product Discount Percentage
      * @param value The value of 'discount'.
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder setDiscount(float value) {
      validate(fields()[4], value);
      this.discount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'discount' field has been set.
      * Product Discount Percentage
      * @return True if the 'discount' field has been set, false otherwise.
      */
    public boolean hasDiscount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'discount' field.
      * Product Discount Percentage
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder clearDiscount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * Product date
      * @return The value.
      */
    public long getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * Product date
      * @param value The value of 'date'.
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder setDate(long value) {
      validate(fields()[5], value);
      this.date = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * Product date
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'date' field.
      * Product date
      * @return This builder.
      */
    public com.project.kafka.avro.Product.Builder clearDate() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Product build() {
      try {
        Product record = new Product();
        record.product_id = fieldSetFlags()[0] ? this.product_id : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.Float) defaultValue(fields()[3]);
        record.discount = fieldSetFlags()[4] ? this.discount : (java.lang.Float) defaultValue(fields()[4]);
        record.date = fieldSetFlags()[5] ? this.date : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Product>
    WRITER$ = (org.apache.avro.io.DatumWriter<Product>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Product>
    READER$ = (org.apache.avro.io.DatumReader<Product>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.product_id);

    out.writeString(this.name);

    out.writeString(this.description);

    out.writeFloat(this.price);

    out.writeFloat(this.discount);

    out.writeLong(this.date);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.product_id = in.readString();

      this.name = in.readString();

      this.description = in.readString();

      this.price = in.readFloat();

      this.discount = in.readFloat();

      this.date = in.readLong();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.product_id = in.readString();
          break;

        case 1:
          this.name = in.readString();
          break;

        case 2:
          this.description = in.readString();
          break;

        case 3:
          this.price = in.readFloat();
          break;

        case 4:
          this.discount = in.readFloat();
          break;

        case 5:
          this.date = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










