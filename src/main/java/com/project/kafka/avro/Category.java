/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.project.kafka.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Category extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -40167966571239933L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Category\",\"namespace\":\"com.project.kafka.avro\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Category Name\"},{\"name\":\"imageUrl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Category Image\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Category> ENCODER =
      new BinaryMessageEncoder<Category>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Category> DECODER =
      new BinaryMessageDecoder<Category>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Category> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Category> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Category> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Category>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Category to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Category from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Category instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Category fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Category Name */
  @Deprecated public java.lang.String name;
  /** Category Image */
  @Deprecated public java.lang.String imageUrl;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Category() {}

  /**
   * All-args constructor.
   * @param name Category Name
   * @param imageUrl Category Image
   */
  public Category(java.lang.String name, java.lang.String imageUrl) {
    this.name = name;
    this.imageUrl = imageUrl;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return imageUrl;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = value$ != null ? value$.toString() : null; break;
    case 1: imageUrl = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Category Name
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Category Name
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'imageUrl' field.
   * @return Category Image
   */
  public java.lang.String getImageUrl() {
    return imageUrl;
  }


  /**
   * Sets the value of the 'imageUrl' field.
   * Category Image
   * @param value the value to set.
   */
  public void setImageUrl(java.lang.String value) {
    this.imageUrl = value;
  }

  /**
   * Creates a new Category RecordBuilder.
   * @return A new Category RecordBuilder
   */
  public static com.project.kafka.avro.Category.Builder newBuilder() {
    return new com.project.kafka.avro.Category.Builder();
  }

  /**
   * Creates a new Category RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Category RecordBuilder
   */
  public static com.project.kafka.avro.Category.Builder newBuilder(com.project.kafka.avro.Category.Builder other) {
    if (other == null) {
      return new com.project.kafka.avro.Category.Builder();
    } else {
      return new com.project.kafka.avro.Category.Builder(other);
    }
  }

  /**
   * Creates a new Category RecordBuilder by copying an existing Category instance.
   * @param other The existing instance to copy.
   * @return A new Category RecordBuilder
   */
  public static com.project.kafka.avro.Category.Builder newBuilder(com.project.kafka.avro.Category other) {
    if (other == null) {
      return new com.project.kafka.avro.Category.Builder();
    } else {
      return new com.project.kafka.avro.Category.Builder(other);
    }
  }

  /**
   * RecordBuilder for Category instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Category>
    implements org.apache.avro.data.RecordBuilder<Category> {

    /** Category Name */
    private java.lang.String name;
    /** Category Image */
    private java.lang.String imageUrl;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.project.kafka.avro.Category.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.imageUrl)) {
        this.imageUrl = data().deepCopy(fields()[1].schema(), other.imageUrl);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing Category instance
     * @param other The existing instance to copy.
     */
    private Builder(com.project.kafka.avro.Category other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.imageUrl)) {
        this.imageUrl = data().deepCopy(fields()[1].schema(), other.imageUrl);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Category Name
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Category Name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.project.kafka.avro.Category.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Category Name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Category Name
      * @return This builder.
      */
    public com.project.kafka.avro.Category.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'imageUrl' field.
      * Category Image
      * @return The value.
      */
    public java.lang.String getImageUrl() {
      return imageUrl;
    }


    /**
      * Sets the value of the 'imageUrl' field.
      * Category Image
      * @param value The value of 'imageUrl'.
      * @return This builder.
      */
    public com.project.kafka.avro.Category.Builder setImageUrl(java.lang.String value) {
      validate(fields()[1], value);
      this.imageUrl = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'imageUrl' field has been set.
      * Category Image
      * @return True if the 'imageUrl' field has been set, false otherwise.
      */
    public boolean hasImageUrl() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'imageUrl' field.
      * Category Image
      * @return This builder.
      */
    public com.project.kafka.avro.Category.Builder clearImageUrl() {
      imageUrl = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Category build() {
      try {
        Category record = new Category();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.imageUrl = fieldSetFlags()[1] ? this.imageUrl : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Category>
    WRITER$ = (org.apache.avro.io.DatumWriter<Category>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Category>
    READER$ = (org.apache.avro.io.DatumReader<Category>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeString(this.imageUrl);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString();

      this.imageUrl = in.readString();

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString();
          break;

        case 1:
          this.imageUrl = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










